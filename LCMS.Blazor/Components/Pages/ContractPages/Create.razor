@page "/contracts/create"
@using DocumentFormat.OpenXml.Spreadsheet
@using Microsoft.AspNetCore.Authorization
@using LCMS.Models
@using static LCMS.Models.Enums
@using LCMS.Services.Interfaces
@using LCMS.Blazor.Components.Pages.BaseClasses
@using Telerik.Blazor.Components.Spreadsheet
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@attribute [Authorize]
@inherits AuthenticatedPageBase
@using System.IO
@using Telerik.Documents.SpreadsheetStreaming

<PageTitle>Create</PageTitle>

<style>
	.k-editor-toolbar {
		display: none;
	}

	.k-spreadsheet-action-bar {
		display: none;
	}
</style>

<div class="row">
	<div class="col-6">
		<h1>Create Contract</h1>
	</div>
	<div class="col-6 text-end">
		<a class="btn btn-outline-secondary" href="/contracts">Cancel</a>
		<button type="submit" class="btn btn-primary">Save</button>
	</div>
</div>
<hr />
<div class="row">
	<div class="col-md-6">
		@if (Model.DocumentTypeId == 0)
		{
			<TelerikDropZone Id="dropzone" NoteText="Allowed file types: Word, Excel, PDF" />
			@*<TelerikFileSelect DropZoneId="dropzone" AllowedExtensions="@AllowedExtensions" Multiple="false" OnSelect="@OnFileSelectAsync" />*@
			<TelerikUpload Id="upload" DropZoneId="dropzone" SaveUrl="@UploadSaveUrl" RemoveUrl="@UploadRemoveUrl" MaxFileSize="@( 16 * 1024 * 1024 )" OnSelect="OnUploadSelected" OnUpload="@OnUploadUpload" OnSuccess="@OnUploadSuccess" />
		}
		<div class="my-3">
			Select Document Type:
			<TelerikRadioGroup Data="@DocumentTypes" @bind-Value="@Model.DocumentTypeId" OnChange="@OnDocumentTypeChanged" Layout="RadioGroupLayout.Horizontal" />
		</div>
		@if (Model.DocumentTypeId == (int)DocumentType.Word || Model.DocumentTypeId == (int)DocumentType.Text)
		{
			<TelerikEditor Height="600px" Tools="@EditorTools" ReadOnly Value="@EditorContent">
				<EditorCustomTools>
					<EditorCustomTool Name="SearchText">
						<div class="input-group pb-1">
							<input type="text" @bind="SearchValue" class="form-control" placeholder="Search document for text..." aria-label="Search Text" aria-describedby="btnSearchText">
							<button class="btn btn-outline-success" type="button" id="btnSearchText" onclick="@EditorSearch">Search</button>
						</div>
					</EditorCustomTool>
				</EditorCustomTools>
			</TelerikEditor>
		}
		@if (Model.DocumentTypeId == (int)DocumentType.Excel)
		{
			<TelerikSpreadsheet Height="600px" Tools="@SpreadsheetTools" Data="@DocumentData" />
		}
		@if (Model.DocumentTypeId == (int)DocumentType.PDF)
		{
			<TelerikPdfViewer Height="600px" Data="@DocumentData" />
		}
		@if (Model.DocumentTypeId == (int)DocumentType.Image)
		{
			<div style="width: 100%; min-height: 100px; border: solid 1px lightgrey;">
				<img src="@ImageSrc" style="width: 100%;" />
			</div>
		}
	</div>
	<div class="col-md-6">
		<EditForm method="post" Model="Model" OnValidSubmit="CreateContract" FormName="create" Enhance>
			<div class="row">
				<div class="col-md-6">
					<div class="mb-3">
						<label for="title" class="form-label">Title</label>
						<InputText id="title" @bind-Value="Model.Title" class="form-control" />
						<ValidationMessage For="() => Model.Title" class="text-danger" />
					</div>
					<div class="mb-3">
						<label for="summary" class="form-label">Summary</label>
						<InputTextArea id="summary" @bind-Value="Model.Summary" class="form-control" rows="8"></InputTextArea>
						<ValidationMessage For="() => Model.Summary" class="text-danger" />
					</div>
					<div class="row">
						<div class="col-sm-3">
							<div class="mb-3">
								<InputCheckbox id="isActive" @bind-Value="Model.IsActive" class="form-check-input" />
								<label for="isActive" class="form-label">Active</label>
								<ValidationMessage For="() => Model.IsActive" class="text-danger" />
							</div>
						</div>
						<div class="col-sm-3">
							<div class="mb-3">
								<InputCheckbox id="isDeleted" @bind-Value="Model.IsDeleted" class="form-check-input" />
								<label for="isDeleted" class="form-label">Deleted</label>
								<ValidationMessage For="() => Model.IsDeleted" class="text-danger" />
							</div>
						</div>
					</div>
				</div>
				<div class="col-md-6">
					<DataAnnotationsValidator />
					<ValidationSummary class="text-danger" role="alert" />
					<div class="mb-3">
						<label for="clientId" class="form-label">Client</label>
						<InputSelect id="clientId" @bind-Value="Model.ClientId" class="form-select">
							<option value="">
								Select...
							</option>
							@foreach (var client in Clients)
							{
								<option checked="@(Model.ClientId == client.Key)" value="@client.Key">
									@client.Value
								</option>
							}
						</InputSelect>
						<ValidationMessage For="() => Model.ClientId" class="text-danger" />
					</div>
					<div class="mb-3">
						<label for="typeId" class="form-label">Contract Type</label>
						<InputSelect id="typeId" @bind-Value="Model.ContractTypeId" class="form-select">
							<option value="">
								Select...
							</option>
							@foreach (Enums.ContractType value in Enum.GetValues(typeof(Enums.ContractType)))
							{
								<option checked="@(Model.ContractTypeId == (int)value)" value="@((int)value)">
									@value.ToString()
								</option>
							}
						</InputSelect>
						<ValidationMessage For="() => Model.ContractTypeId" class="text-danger" />
					</div>
					<div class="mb-3">
						<label for="statusId" class="form-label">Status</label>
						<InputSelect id="statusId" @bind-Value="Model.StatusId" class="form-select">
							<option value="">
								Select...
							</option>
							@foreach (Enums.ContractStatus value in Enum.GetValues(typeof(Enums.ContractStatus)))
							{
								<option checked="@(Model.ContractTypeId == (int)value)" value="@((int)value)">
									@value.ToString()
								</option>
							}
						</InputSelect>
						<ValidationMessage For="() => Model.StatusId" class="text-danger" />
					</div>
				</div>
			</div>
		</EditForm>
	</div>
</div>

@code {
	[SupplyParameterFromForm]
	private ContractModel Model { get; set; } = new();

	private ElementReference UploadFileContainer;
	private List<string> AllowedExtensions { get; set; } = new List<string>() { ".docx", ".doc", ".xlsx", ".xls", ".pdf" };
	private string UploadSaveUrl => ToAbsoluteUrl("api/upload/save");
	private string UploadRemoveUrl => ToAbsoluteUrl("api/upload/remove");
	private string ToAbsoluteUrl(string url) { return $"{NavigationManager.BaseUri}{url}"; }

	private string EditorContent { get; set; } = string.Empty;
	private byte[]? DocumentData { get; set; }
	private string ImageSrc { get; set; } = string.Empty;

	private List<IEditorTool> EditorTools { get; set; } = new List<IEditorTool>();
	private SpreadsheetToolSet SpreadsheetTools { get; set; } = new SpreadsheetToolSet();
	private string SearchValue { get; set; } = string.Empty;

	private List<KeyValuePair<int, string>> Clients = new();

	private List<DocumentType> DocumentTypes
	{
		get
		{
			var documentTypesAsArray = (DocumentType[])Enum.GetValues(typeof(DocumentType));
			List<DocumentType> documentTypes = new List<DocumentType>(documentTypesAsArray);
			return documentTypes;
		}
	}

	private RenderFragment SpreadsheetSearchTemplate =>
	@<div class="input-group pb-1">
		<input type="text" @bind="SearchValue" class="form-control" placeholder="Search document for text..." aria-label="Search Text" aria-describedby="btnSearchText">
		<button class="btn btn-outline-success" type="button" id="btnSearchText" onclick="@SpreadsheetSearch">Search</button>
	</div>;

	protected override async Task OnInitializedAsync()
	{
		var clientService = ServiceProvider.GetRequiredService<IClientService>();
		Clients = clientService.GetClientKeyValuePairs(true, false);

		SpreadsheetTools.Items = new List<SpreadsheetToolSetItem>()
		{
			new SpreadsheetToolSetItem()
			{
				Tools = new List<SpreadsheetTool>()
				{
					new SpreadsheetCustomTool(){ Template = SpreadsheetSearchTemplate },
				}
			}
		};

		await base.OnInitializedAsync();
	}

	// private async Task OnFileSelectAsync(FileSelectEventArgs args)
	// {
	// 	var selectedFile = args.Files[0];
	// 	Model.FileName = selectedFile.Name;

	// 	// Set document type from file extension
	// 	switch (selectedFile.Extension)
	// 	{
	// 		case ".docx":
	// 		case ".doc":
	// 			Model.DocumentTypeId = (int)DocumentType.Word;
	// 			break;
	// 		case ".xlsx":
	// 		case ".xls":
	// 			Model.DocumentTypeId = (int)DocumentType.Excel;
	// 			break;
	// 		case ".pdf":
	// 			Model.DocumentTypeId = (int)DocumentType.PDF;
	// 			break;
	// 		case ".txt":
	// 			Model.DocumentTypeId = (int)DocumentType.Text;
	// 			break;
	// 		case ".jpeg":
	// 		case ".jpg":
	// 		case ".png":
	// 			Model.DocumentTypeId = (int)DocumentType.Image;
	// 			break;
	// 		default:
	// 			throw new ArgumentOutOfRangeException(string.Format("File Extension '{0}' not supported.", selectedFile.Extension));
	// 	}

	// 	// Check for image
	// 	if (Model.DocumentType == DocumentType.Image)
	// 	{
	// 		ImageSrc = string.Format("/uploads/{0}", selectedFile.Name);
	// 	}

	// 	// // Read file data
	// 	// var selectedFileInfo = new FileInfo(selectedFile.Name);
	// 	// DocumentData = new byte[selectedFile.Stream.Length];
	// 	// await selectedFile.Stream.ReadAsync(DocumentData);

	// 	// e.File is of type FileSelectFileInfo (has Stream, Name, etc.)
	// 	using var stream = selectedFile.Stream;
	// 	using var ms = new MemoryStream();
	// 	await stream.CopyToAsync(ms);

	// 	DocumentData = ms.ToArray();
	// 	// string base64 = Convert.ToBase64String(bytes);
	// 	// ... do something with the base64 or bytes

	// 	Console.WriteLine("here we are");
	// }

	private void OnUploadSelected(UploadSelectEventArgs args)
	{
		var uploadedFile = args.Files[0];
		Model.FileName = uploadedFile.Name;
		Model.DocumentTypeId = 0;
	}

	private void OnUploadUpload(UploadEventArgs args)
	{
		if (!args.Files.Any())
		{
			return;
		}
	}

	private void OnUploadSuccess(UploadSuccessEventArgs args)
	{
		// Hide Dropzone and Upload controls


		var uploadedFile = args.Files[0];
		var filePath = string.Format(@"C:\Users\wloescher\source\repos\LCMS\LCMS.Blazor\wwwroot\uploads\{0}", uploadedFile.Name);
		DocumentData = System.IO.File.ReadAllBytes(filePath);

		var bitString = BitConverter.ToString(DocumentData);
		var utfString = System.Text.Encoding.UTF8.GetString(DocumentData, 0, DocumentData.Length);
		EditorContent = utfString;

		ImageSrc = string.Format("/uploads/{0}", uploadedFile.Name);

		var fileExtension = uploadedFile.Extension;
		switch (fileExtension)
		{
			case ".docx":
			case ".doc":
				Model.DocumentTypeId = (int)DocumentType.Word;
				break;
			case ".xlsx":
			case ".xls":
				Model.DocumentTypeId = (int)DocumentType.Excel;
				break;
			case ".pdf":
				Model.DocumentTypeId = (int)DocumentType.PDF;
				break;
			case ".txt":
			case ".html":
			case ".htm":
				Model.DocumentTypeId = (int)DocumentType.Text;
				break;
			case ".jpg":
			case ".png":
				Model.DocumentTypeId = (int)DocumentType.Image;
				break;
			default:
				throw new ArgumentOutOfRangeException(string.Format("File Extension '{0}' not supported.", fileExtension));
		}
	}

	private void EditorSearch()
	{
		Console.Write(string.Format("TODO: Search Word Document for '{0}'", SearchValue));
	}

	private void SpreadsheetSearch()
	{
		Console.Write(string.Format("TODO: Search Excel Document for '{0}'", SearchValue));
	}

	private void OnDocumentTypeChanged(object newValue)
	{
		// Reset data
		EditorContent = string.Empty;
		DocumentData = null;
		ImageSrc = string.Empty;

		// Display sample file based on selected file type
		var documentType = (DocumentType)newValue;
		var filePath = @"C:\Users\wloescher\source\repos\LCMS\LCMS.Blazor\wwwroot\uploads\";
		var fileName = string.Empty;
		switch (documentType)
		{
			case DocumentType.Text:
				fileName += "sample-contract.txt";
				break;
			case DocumentType.Word:
				fileName += "sample-contract.docx";
				break;
			case DocumentType.Excel:
				fileName += "sample-contract.xlsx";
				break;
			case DocumentType.PDF:
				fileName += "sample-contract.pdf";
				break;
			case DocumentType.Image:
				fileName += "sample-contract.jpg";
				break;
			default:
				throw new ArgumentOutOfRangeException(string.Format("DocumentType '{0}' not supported.", documentType));
		}

		DocumentData = System.IO.File.ReadAllBytes(filePath + fileName);
		EditorContent = System.Text.Encoding.UTF8.GetString(DocumentData, 0, DocumentData.Length);

		ImageSrc = string.Format("/uploads/{0}", fileName);
	}

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private void CreateContract()
	{
		var service = ServiceProvider.GetRequiredService<IContractService>();
		service.CreateContract(Model, _currentUserId);
		NavigationManager.NavigateTo("/contracts");
	}
}

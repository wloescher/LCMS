@page "/cases"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.QuickGrid
@using LCMS.Models
@using LCMS.Services.Interfaces
@using LCMS.Blazor.Components.Pages.BaseClasses
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inherits AuthenticatedPageBase

<PageTitle>Index</PageTitle>

<div class="row">
    <div class="col-sm-6">
        <h1>Cases</h1>
    </div>
    <div class="col-sm-6 text-end">
        <input type="search" @bind="titleFilter" @bind:event="oninput" placeholder="Filter by Title..." />
        <a class="btn btn-sm btn-primary" href="cases/create">Create New</a>
    </div>
</div>
<hr />
<div>
    <QuickGrid Class="table" Items="FilteredModels" Pagination="pagination">
        <PropertyColumn Property="model => model.Title" Sortable="true" />
        <PropertyColumn Property="model => model.ClientName" Sortable="true" />
        <PropertyColumn Property="model => model.Type" Sortable="true" />
        <PropertyColumn Property="model => model.Status" Sortable="true" />
        <PropertyColumn Property="model => model.Summary" Sortable="true" />
        <PropertyColumn Property="model => model.IsActive" Sortable="true" />
        <TemplateColumn Context="model">
            <a class="btn btn-outline-secondary" href="@($"cases/details?id={model.Id}")">Details</a>
            <a class="btn btn-primary" href="@($"cases/edit?id={model.Id}")">Edit</a>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <a class="btn btn-danger" href="@($"cases/delete?id={model.Id}")">Delete</a>
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
    </QuickGrid>
</div>
<Paginator State="pagination" />

@code {
    private List<CaseModel> models = new();
    private string titleFilter = string.Empty;
    private IQueryable<CaseModel> FilteredModels => models.Where(x => x.Title.ToLower().Contains(titleFilter)).AsQueryable();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        var service = ServiceProvider.GetRequiredService<ICaseService>();
        models = service.GetCases();

        await base.OnInitializedAsync();
    }
}

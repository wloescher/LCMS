@page "/cases/delete"
@using Microsoft.AspNetCore.Authorization
@using LCMS.Models
@using LCMS.Services.Interfaces
@using LCMS.Blazor.Components.Pages.BaseClasses
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@attribute [Authorize(Roles = "Admin")]
@inherits AuthenticatedPageBase

<PageTitle>Delete</PageTitle>

<div class="row">
    <div class="col-6">
        <h1>
            <i class="fa-regular fa-folder"></i>
            Delete Case
        </h1>
    </div>
    <div class="col-6 text-end">
        <EditForm method="post" Model="model" OnValidSubmit="DeleteCase" FormName="delete" Enhance>
            <div class="text-end">
                <a class="btn btn-outline-secondary" href="/cases">
                    <i class="fa-regular fa-x"></i>
                    Cancel
                </a>
                <button type="submit" class="btn btn-danger" disabled="@(model is null)">
                    <i class="fa-regular fa-trash"></i>
                    Delete
                </button>
            </div>
        </EditForm>
    </div>
</div>
<hr />
<div>
    <p>Are you sure you want to delete this?</p>
    @if (model is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-sm-4">
                <dt class="col-sm-2">Client</dt>
                <dd class="col-sm-10">@model.ClientName</dd>
                <dt class="col-sm-2">Type</dt>
                <dd class="col-sm-10">@model.Type</dd>
                <dt class="col-sm-2">Status</dt>
                <dd class="col-sm-10">@model.Status</dd>
                <dt class="col-sm-2">Title</dt>
                <dd class="col-sm-10">@model.Title</dd>
                <dt class="col-sm-2">Summary</dt>
                <dd class="col-sm-10">@model.Summary</dd>
                <dt class="col-sm-2">Active</dt>
                <dd class="col-sm-10">@model.IsActive</dd>
            </div>
        </div>
    }
</div>

@code {
    private CaseModel? model;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var service = ServiceProvider.GetRequiredService<ICaseService>();
        model = service.GetCase(Id);
        if (model is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        await base.OnInitializedAsync();
    }

    private void DeleteCase()
    {
        var service = ServiceProvider.GetRequiredService<ICaseService>();
        service.DeleteCase(Id, _currentUserId);
        NavigationManager.NavigateTo("/cases");
    }
}

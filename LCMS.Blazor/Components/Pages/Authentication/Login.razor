@page "/login"
@using System.Security.Claims
@using LCMS.Blazor.Classes
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.EntityFrameworkCore
@using LCMS.Services.Interfaces
@using LCMS.Blazor.ViewModels
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject CustomAuthService AuthService

<EditForm Model="Model" OnValidSubmit="Authenticate" FormName="LoginForm">
    <div class="row justify-content-center">
        <div class="col-md-3">
            <div class="mb-3 text-center flex-column">
                <img src="images/brownstein-logo.webp" style="max-height: 3rem;" class="mb-3" />
                <h3>Contract Management</h3>
            </div>
            <div class="mb-3">
                <label>UserName</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="UserName" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText type="password" @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 text-end">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new() { UserName = "admin", Password = "admin" };

    private string? errorMessage;

    private void Authenticate()
    {
        var currentUser = AuthService.CurrentUser;

        var service = ServiceProvider.GetRequiredService<IUserService>();
        var user = service.GetUser(Model.UserName ?? string.Empty, Model.Password ?? string.Empty);
        if (user is null)
        {
            errorMessage = "Invalid UserName or Password.";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
            new Claim(ClaimTypes.Name, user.UserName ?? string.Empty),
            new Claim(ClaimTypes.GivenName, user.FirstName),
            new Claim(ClaimTypes.Surname, user.LastName),
            new Claim(ClaimTypes.Role, user.Type.ToString()),
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        AuthService.CurrentUser = principal;

        NavigationManager.NavigateTo("/");
    }
}

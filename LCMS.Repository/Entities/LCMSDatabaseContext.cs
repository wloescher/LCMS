// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace LCMS.Repository.Entities;

public partial class LCMSDatabaseContext : DbContext
{
    public LCMSDatabaseContext(DbContextOptions<LCMSDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Case> Cases { get; set; }

    public virtual DbSet<CaseAudit> CaseAudits { get; set; }

    public virtual DbSet<CaseAuditView> CaseAuditViews { get; set; }

    public virtual DbSet<CaseComment> CaseComments { get; set; }

    public virtual DbSet<CaseCommentAudit> CaseCommentAudits { get; set; }

    public virtual DbSet<CaseCommentView> CaseCommentViews { get; set; }

    public virtual DbSet<CaseDocument> CaseDocuments { get; set; }

    public virtual DbSet<CaseDocumentAudit> CaseDocumentAudits { get; set; }

    public virtual DbSet<CaseDocumentView> CaseDocumentViews { get; set; }

    public virtual DbSet<CaseNote> CaseNotes { get; set; }

    public virtual DbSet<CaseNoteAudit> CaseNoteAudits { get; set; }

    public virtual DbSet<CaseNoteView> CaseNoteViews { get; set; }

    public virtual DbSet<CaseUser> CaseUsers { get; set; }

    public virtual DbSet<CaseUserAudit> CaseUserAudits { get; set; }

    public virtual DbSet<CaseUserView> CaseUserViews { get; set; }

    public virtual DbSet<CaseView> CaseViews { get; set; }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<ClientAudit> ClientAudits { get; set; }

    public virtual DbSet<ClientAuditView> ClientAuditViews { get; set; }

    public virtual DbSet<ClientView> ClientViews { get; set; }

    public virtual DbSet<DataDictionary> DataDictionaries { get; set; }

    public virtual DbSet<DataDictionaryAudit> DataDictionaryAudits { get; set; }

    public virtual DbSet<DataDictionaryAuditView> DataDictionaryAuditViews { get; set; }

    public virtual DbSet<DataDictionaryGroup> DataDictionaryGroups { get; set; }

    public virtual DbSet<DataDictionaryGroupAudit> DataDictionaryGroupAudits { get; set; }

    public virtual DbSet<DataDictionaryGroupAuditView> DataDictionaryGroupAuditViews { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<UserAccountAudit> UserAccountAudits { get; set; }

    public virtual DbSet<UserAccountView> UserAccountViews { get; set; }

    public virtual DbSet<UserAudit> UserAudits { get; set; }

    public virtual DbSet<UserAuditView> UserAuditViews { get; set; }

    public virtual DbSet<UserView> UserViews { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Case>(entity =>
        {
            entity.Property(e => e.CaseGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.CaseClient).WithMany(p => p.Cases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Case_Client");

            entity.HasOne(d => d.CaseStatus).WithMany(p => p.CaseCaseStatuses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Case_DataDictionary_Status");

            entity.HasOne(d => d.CaseType).WithMany(p => p.CaseCaseTypes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Case_DataDictionary_Type");
        });

        modelBuilder.Entity<CaseAudit>(entity =>
        {
            entity.Property(e => e.CaseAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.CaseAuditAction).WithMany(p => p.CaseAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseAudit_DataDictionary");

            entity.HasOne(d => d.CaseAuditCase).WithMany(p => p.CaseAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseAudit_Case");

            entity.HasOne(d => d.CaseAuditUser).WithMany(p => p.CaseAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseAudit_User");
        });

        modelBuilder.Entity<CaseAuditView>(entity =>
        {
            entity.ToView("CaseAuditView");
        });

        modelBuilder.Entity<CaseComment>(entity =>
        {
            entity.Property(e => e.CaseCommentGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.CaseCommentCase).WithMany(p => p.CaseComments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseComment_Case");
        });

        modelBuilder.Entity<CaseCommentAudit>(entity =>
        {
            entity.Property(e => e.CaseCommentAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.CaseCommentAuditAction).WithMany(p => p.CaseCommentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseCommentAudit_DataDictionary");

            entity.HasOne(d => d.CaseCommentAuditCaseComment).WithMany(p => p.CaseCommentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseCommentAudit_CaseComment");

            entity.HasOne(d => d.CaseCommentAuditUser).WithMany(p => p.CaseCommentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseCommentAudit_User");
        });

        modelBuilder.Entity<CaseCommentView>(entity =>
        {
            entity.ToView("CaseCommentView");
        });

        modelBuilder.Entity<CaseDocument>(entity =>
        {
            entity.Property(e => e.CaseDocumentGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.CaseDocumentCase).WithMany(p => p.CaseDocuments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseDocument_Case");
        });

        modelBuilder.Entity<CaseDocumentAudit>(entity =>
        {
            entity.Property(e => e.CaseDocumentAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.CaseDocumentAuditAction).WithMany(p => p.CaseDocumentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseDocumentAudit_DataDictionary");

            entity.HasOne(d => d.CaseDocumentAuditCaseDocument).WithMany(p => p.CaseDocumentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseDocumentAudit_CaseDocument");

            entity.HasOne(d => d.CaseDocumentAuditUser).WithMany(p => p.CaseDocumentAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseDocumentAudit_User");
        });

        modelBuilder.Entity<CaseDocumentView>(entity =>
        {
            entity.ToView("CaseDocumentView");
        });

        modelBuilder.Entity<CaseNote>(entity =>
        {
            entity.Property(e => e.CaseNoteGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.CaseNoteCase).WithMany(p => p.CaseNotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseNote_Case");
        });

        modelBuilder.Entity<CaseNoteAudit>(entity =>
        {
            entity.Property(e => e.CaseNoteAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.CaseNoteAuditAction).WithMany(p => p.CaseNoteAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseNoteAudit_DataDictionary");

            entity.HasOne(d => d.CaseNoteAuditCaseNote).WithMany(p => p.CaseNoteAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseNoteAudit_CaseNote");

            entity.HasOne(d => d.CaseNoteAuditUser).WithMany(p => p.CaseNoteAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseNoteAudit_User");
        });

        modelBuilder.Entity<CaseNoteView>(entity =>
        {
            entity.ToView("CaseNoteView");
        });

        modelBuilder.Entity<CaseUser>(entity =>
        {
            entity.HasOne(d => d.CaseUserCase).WithMany(p => p.CaseUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseUser_Case");

            entity.HasOne(d => d.CaseUserUser).WithMany(p => p.CaseUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseUser_User");
        });

        modelBuilder.Entity<CaseUserAudit>(entity =>
        {
            entity.Property(e => e.CaseUserAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.CaseUserAuditAction).WithMany(p => p.CaseUserAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseUserAudit_DataDictionary");

            entity.HasOne(d => d.CaseUserAuditCaseUser).WithMany(p => p.CaseUserAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseUserAudit_CaseUser");

            entity.HasOne(d => d.CaseUserAuditUser).WithMany(p => p.CaseUserAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseUserAudit_User");
        });

        modelBuilder.Entity<CaseUserView>(entity =>
        {
            entity.ToView("CaseUserView");
        });

        modelBuilder.Entity<CaseView>(entity =>
        {
            entity.ToView("CaseView");
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.Property(e => e.ClientGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.ClientType).WithMany(p => p.Clients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Client_DataDictionary");
        });

        modelBuilder.Entity<ClientAudit>(entity =>
        {
            entity.Property(e => e.ClientAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.ClientAuditAction).WithMany(p => p.ClientAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientAudit_DataDictionary");

            entity.HasOne(d => d.ClientAuditClient).WithMany(p => p.ClientAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientAudit_Client");

            entity.HasOne(d => d.ClientAuditUser).WithMany(p => p.ClientAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientAudit_User");
        });

        modelBuilder.Entity<ClientAuditView>(entity =>
        {
            entity.ToView("ClientAuditView");
        });

        modelBuilder.Entity<ClientView>(entity =>
        {
            entity.ToView("ClientView");
        });

        modelBuilder.Entity<DataDictionary>(entity =>
        {
            entity.HasOne(d => d.DataDictionaryGroup).WithMany(p => p.DataDictionaries)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionary_DataDictionarGroup");
        });

        modelBuilder.Entity<DataDictionaryAudit>(entity =>
        {
            entity.Property(e => e.DataDictionaryAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.DataDictionaryAuditAction).WithMany(p => p.DataDictionaryAuditDataDictionaryAuditActions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryAudit_DataDictionary_ActionId");

            entity.HasOne(d => d.DataDictionaryAuditDataDictionary).WithMany(p => p.DataDictionaryAuditDataDictionaryAuditDataDictionaries)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryAudit_DataDictionary_DataDictionaryId");

            entity.HasOne(d => d.DataDictionaryAuditUser).WithMany(p => p.DataDictionaryAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryAudit_User");
        });

        modelBuilder.Entity<DataDictionaryAuditView>(entity =>
        {
            entity.ToView("DataDictionaryAuditView");
        });

        modelBuilder.Entity<DataDictionaryGroupAudit>(entity =>
        {
            entity.Property(e => e.DataDictionaryGroupAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.DataDictionaryGroupAuditAction).WithMany(p => p.DataDictionaryGroupAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryGroupAudit_DataDictionary");

            entity.HasOne(d => d.DataDictionaryGroupAuditDataDictionaryGroup).WithMany(p => p.DataDictionaryGroupAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryGroupAudit_DataDictionaryGroup");

            entity.HasOne(d => d.DataDictionaryGroupAuditUser).WithMany(p => p.DataDictionaryGroupAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DataDictionaryGroupAudit_User");
        });

        modelBuilder.Entity<DataDictionaryGroupAuditView>(entity =>
        {
            entity.ToView("DataDictionaryGroupAuditView");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.UserType).WithMany(p => p.Users)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_DataDictionary");

            entity.HasOne(d => d.UserUserAccount).WithMany(p => p.Users).HasConstraintName("FK_User_UserAccount");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.Property(e => e.UserAccountGuid).HasDefaultValueSql("NEWID()");
            entity.Property(e => e.UserAccountPasswordAttemptCount).HasDefaultValue(-1);
        });

        modelBuilder.Entity<UserAccountAudit>(entity =>
        {
            entity.Property(e => e.UserAccountAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.UserAccountAuditAction).WithMany(p => p.UserAccountAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccountAudit_DataDictionary");

            entity.HasOne(d => d.UserAccountAuditUserAccount).WithMany(p => p.UserAccountAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccountAudit_UserAccount");

            entity.HasOne(d => d.UserAccountAuditUser).WithMany(p => p.UserAccountAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccountAudit_User");
        });

        modelBuilder.Entity<UserAccountView>(entity =>
        {
            entity.ToView("UserAccountView");
        });

        modelBuilder.Entity<UserAudit>(entity =>
        {
            entity.Property(e => e.UserAuditDate).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.UserAuditAction).WithMany(p => p.UserAudits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAudit_DataDictionary");

            entity.HasOne(d => d.UserAuditUser).WithMany(p => p.UserAuditUserAuditUsers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAudit_User");

            entity.HasOne(d => d.UserAuditUserIdSourceNavigation).WithMany(p => p.UserAuditUserAuditUserIdSourceNavigations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAudit_User_Source");
        });

        modelBuilder.Entity<UserAuditView>(entity =>
        {
            entity.ToView("UserAuditView");
        });

        modelBuilder.Entity<UserView>(entity =>
        {
            entity.ToView("UserView");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}